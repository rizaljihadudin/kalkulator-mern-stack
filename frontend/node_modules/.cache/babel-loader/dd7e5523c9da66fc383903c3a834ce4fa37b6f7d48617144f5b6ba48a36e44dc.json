{"ast":null,"code":"const numberToText = require('../index');\nconst hundreds = ['', 'Thousand', 'Lakh', 'Crore'];\nconst ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\nconst tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\nconst cases = ['titleCase', 'lowerCase', 'upperCase'];\nconst caseFunctions = [String.prototype.toString, String.prototype.toLowerCase, String.prototype.toUpperCase];\nclass EnInConverter extends numberToText.Converter {\n  constructor() {\n    super();\n    numberToText.addConverter('en-in', this);\n  }\n  convertToText(num, options) {\n    if (options.separator !== '') options.separator = options.separator || ',';\n    if (cases.indexOf(options.case) === -1) {\n      options.case = cases[0];\n    }\n    const caseFunction = caseFunctions[cases.indexOf(options.case)];\n    const valueArray = [];\n    if (typeof num === 'number' || num instanceof Number) {\n      num = num.toString();\n    }\n    if (num === '0') {\n      return caseFunction.call('Zero');\n    }\n    const splittedNumbers = num.match(/.{1,}(?=(..){2}(...)$)|.{1,2}(?=(..){0,1}(...)$)|.{1,3}$/g);\n    for (let index = 0; index < splittedNumbers.length; ++index) {\n      const splitValues = [];\n      const splitNum = splittedNumbers[index];\n      if (splittedNumbers.length === 4 && index === 0 && splitNum.length > 2) {\n        splitValues.push(this.convertToText(splitNum, options));\n      } else {\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\n          splitValues.push(ones[splitNum.charAt(0)]);\n          splitValues.push('Hundred');\n        }\n        if (splitNum.length >= 2) {\n          if (splitNum.substr(-2, 1) === '1') {\n            splitValues.push(ones[splitNum.substr(-2, 2)]);\n          } else {\n            if (tens[splitNum.substr(-2, 1)]) {\n              splitValues.push(tens[splitNum.substr(-2, 1)]);\n            }\n            if (ones[splitNum.substr(-1, 1)]) {\n              splitValues.push(ones[splitNum.substr(-1, 1)]);\n            }\n          }\n        } else {\n          splitValues.push(ones[splitNum.charAt(0)]);\n        }\n      }\n      if (hundreds[splittedNumbers.length - 1 - index] && splitValues.length > 0) {\n        splitValues.push(hundreds[splittedNumbers.length - 1 - index]);\n      }\n      if (splitValues.length > 0) {\n        valueArray.push(splitValues.join(' '));\n      }\n    }\n    return caseFunction.call(valueArray.join(options.separator + ' '));\n  }\n}\nmodule.exports = new EnInConverter();","map":{"version":3,"names":["numberToText","require","hundreds","ones","tens","cases","caseFunctions","String","prototype","toString","toLowerCase","toUpperCase","EnInConverter","Converter","constructor","addConverter","convertToText","num","options","separator","indexOf","case","caseFunction","valueArray","Number","call","splittedNumbers","match","index","length","splitValues","splitNum","push","charAt","substr","join","module","exports"],"sources":["C:/Users/Lenovo/Documents/BELAJAR/kalkulator-mern/frontend/node_modules/number-to-text/converters/en-in.js"],"sourcesContent":["const numberToText = require('../index')\n\nconst hundreds = ['', 'Thousand', 'Lakh', 'Crore']\nconst ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\nconst tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\nconst cases = ['titleCase', 'lowerCase', 'upperCase']\nconst caseFunctions = [String.prototype.toString, String.prototype.toLowerCase, String.prototype.toUpperCase]\n\nclass EnInConverter extends numberToText.Converter {\n  constructor () {\n    super()\n    numberToText.addConverter('en-in', this)\n  }\n\n  convertToText (num, options) {\n    if (options.separator !== '') options.separator = options.separator || ','\n    if (cases.indexOf(options.case) === -1) {\n      options.case = cases[0]\n    }\n    const caseFunction = caseFunctions[cases.indexOf(options.case)]\n\n    const valueArray = []\n    if (typeof num === 'number' || num instanceof Number) {\n      num = num.toString()\n    }\n    if (num === '0') {\n      return caseFunction.call('Zero')\n    }\n    const splittedNumbers = num.match(/.{1,}(?=(..){2}(...)$)|.{1,2}(?=(..){0,1}(...)$)|.{1,3}$/g)\n    for (let index = 0; index < splittedNumbers.length; ++index) {\n      const splitValues = []\n      const splitNum = splittedNumbers[index]\n      if (splittedNumbers.length === 4 && index === 0 && splitNum.length > 2) {\n        splitValues.push(this.convertToText(splitNum, options))\n      } else {\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\n          splitValues.push(ones[splitNum.charAt(0)])\n          splitValues.push('Hundred')\n        } if (splitNum.length >= 2) {\n          if (splitNum.substr(-2, 1) === '1') {\n            splitValues.push(ones[splitNum.substr(-2, 2)])\n          } else {\n            if (tens[splitNum.substr(-2, 1)]) {\n              splitValues.push(tens[splitNum.substr(-2, 1)])\n            }\n            if (ones[splitNum.substr(-1, 1)]) {\n              splitValues.push(ones[splitNum.substr(-1, 1)])\n            }\n          }\n        } else {\n          splitValues.push(ones[splitNum.charAt(0)])\n        }\n      }\n      if (hundreds[splittedNumbers.length - 1 - index] && splitValues.length > 0) {\n        splitValues.push(hundreds[splittedNumbers.length - 1 - index])\n      }\n      if (splitValues.length > 0) {\n        valueArray.push(splitValues.join(' '))\n      }\n    }\n    return caseFunction.call((valueArray.join(options.separator + ' ')))\n  }\n}\nmodule.exports = new EnInConverter()\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}