{"ast":null,"code":"const Converter = require('./lib/Converter');\nconst container = {};\nclass NumberToText {\n  /**\r\n  *  convert number to text\r\n  *  @param {string or number} num\r\n  *  @param {object } options { language : \"en-us\" ,separator :\",\" ,case : \"titleCase\" } current support languages en-us, en-in annd de and cases are \"titleCase\" , \"lowerCase\" , \"upperCase\". default is { language : \"en-us\" ,separator :\",\" ,case : \"titleCase\" }\r\n  */\n  constructor() {\n    this.Converter = Converter;\n  }\n  convertToText(num, options) {\n    options = options || {};\n    const language = (options.language || 'en-us').toLowerCase();\n    if (Object.prototype.hasOwnProperty.call(container, language)) {\n      return container[language].convertToText(num, options);\n    } else {\n      throw new Error('converter for language \"' + language + '\" not found.');\n    }\n  }\n  addConverter(language, langConverter) {\n    if (!Object.prototype.hasOwnProperty.call(container, language)) {\n      if (langConverter instanceof Converter) {\n        container[language] = langConverter;\n      } else {\n        throw new Error('language converter is not instance of converter');\n      }\n    } else {\n      return false;\n    }\n  }\n}\nmodule.exports = new NumberToText();","map":{"version":3,"names":["Converter","require","container","NumberToText","constructor","convertToText","num","options","language","toLowerCase","Object","prototype","hasOwnProperty","call","Error","addConverter","langConverter","module","exports"],"sources":["C:/Users/Lenovo/Documents/BELAJAR/kalkulator-mern/frontend/node_modules/number-to-text/index.js"],"sourcesContent":["const Converter = require('./lib/Converter')\r\nconst container = {}\r\nclass NumberToText {\r\n  /**\r\n  *  convert number to text\r\n  *  @param {string or number} num\r\n  *  @param {object } options { language : \"en-us\" ,separator :\",\" ,case : \"titleCase\" } current support languages en-us, en-in annd de and cases are \"titleCase\" , \"lowerCase\" , \"upperCase\". default is { language : \"en-us\" ,separator :\",\" ,case : \"titleCase\" }\r\n  */\r\n  constructor () {\r\n    this.Converter = Converter\r\n  }\r\n\r\n  convertToText (num, options) {\r\n    options = options || {}\r\n\r\n    const language = (options.language || 'en-us').toLowerCase()\r\n    if (Object.prototype.hasOwnProperty.call(container, language)) {\r\n      return container[language].convertToText(num, options)\r\n    } else {\r\n      throw new Error('converter for language \"' + language + '\" not found.')\r\n    }\r\n  }\r\n\r\n  addConverter (language, langConverter) {\r\n    if (!Object.prototype.hasOwnProperty.call(container, language)) {\r\n      if (langConverter instanceof Converter) {\r\n        container[language] = langConverter\r\n      } else {\r\n        throw new Error('language converter is not instance of converter')\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new NumberToText()\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMC,SAAS,GAAG,CAAC,CAAC;AACpB,MAAMC,YAAY,CAAC;EACjB;AACF;AACA;AACA;AACA;EACEC,WAAW,GAAI;IACb,IAAI,CAACJ,SAAS,GAAGA,SAAS;EAC5B;EAEAK,aAAa,CAAEC,GAAG,EAAEC,OAAO,EAAE;IAC3BA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,MAAMC,QAAQ,GAAG,CAACD,OAAO,CAACC,QAAQ,IAAI,OAAO,EAAEC,WAAW,EAAE;IAC5D,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,SAAS,EAAEM,QAAQ,CAAC,EAAE;MAC7D,OAAON,SAAS,CAACM,QAAQ,CAAC,CAACH,aAAa,CAACC,GAAG,EAAEC,OAAO,CAAC;IACxD,CAAC,MAAM;MACL,MAAM,IAAIO,KAAK,CAAC,0BAA0B,GAAGN,QAAQ,GAAG,cAAc,CAAC;IACzE;EACF;EAEAO,YAAY,CAAEP,QAAQ,EAAEQ,aAAa,EAAE;IACrC,IAAI,CAACN,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,SAAS,EAAEM,QAAQ,CAAC,EAAE;MAC9D,IAAIQ,aAAa,YAAYhB,SAAS,EAAE;QACtCE,SAAS,CAACM,QAAQ,CAAC,GAAGQ,aAAa;MACrC,CAAC,MAAM;QACL,MAAM,IAAIF,KAAK,CAAC,iDAAiD,CAAC;MACpE;IACF,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;AACF;AAEAG,MAAM,CAACC,OAAO,GAAG,IAAIf,YAAY,EAAE"},"metadata":{},"sourceType":"script","externalDependencies":[]}