{"ast":null,"code":"const numberToText = require('../index');\nconst thousands = ['', 'Ribu', 'Juta', 'Milyar', 'Triliun'];\nconst ones = ['', 'Satu', 'Dua', 'Tiga', 'Empat', 'Lima', 'Enam', 'Tujuh', 'Delapan', 'Sembilan', 'Sepuluh', 'Sebelas', 'Dua belas', 'Tiga Belas', 'Empat Belas', 'Lima Belas', 'Enam Belas', 'Tujuh Belas', 'Delapan Belas', 'Sembilan Belas'];\nconst tens = ['', '', 'Dua Puluh', 'Tiga Puluh', 'Empat Puluh', 'Lima Puluh', 'Enam Puluh', 'Tujuh Puluh', 'Delapan Puluh', 'Sembilan Puluh'];\nconst cases = ['titleCase', 'lowerCase', 'upperCase'];\nconst caseFunctions = [String.prototype.toString, String.prototype.toLowerCase, String.prototype.toUpperCase];\nclass IdConverter extends numberToText.Converter {\n  constructor() {\n    super();\n    numberToText.addConverter('id', this);\n  }\n  convertToText(num, options) {\n    options = options || {};\n    if (options.separator !== '') options.separator = options.separator || '';\n    if (cases.indexOf(options.case) === -1) {\n      options.case = cases[0];\n    }\n    const caseFunction = caseFunctions[cases.indexOf(options.case)];\n    const valueArray = [];\n    if (typeof num === 'number' || num instanceof Number) {\n      num = num.toString();\n    }\n    if (num === '0') {\n      return caseFunction.call('nol');\n    }\n    if (num === '100') return caseFunction.call('Seratus');\n    if (num === '1000') return caseFunction.call('Seribu');\n    const splittedNumbers = num.match(/.{1,}(?=(...){5}(...)$)|.{1,3}(?=(...){0,5}$)|.{1,3}$/g);\n    for (let index = 0; index < splittedNumbers.length; ++index) {\n      const splitValues = [];\n      const splitNum = splittedNumbers[index];\n      if (splitNum.length > 3) {\n        splitValues.push(module.exports.convertToText(splitNum));\n      } else {\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\n          splitValues.push(ones[splitNum.charAt(0)]);\n          splitValues.push('Ratus');\n        }\n        if (splitNum.length >= 2) {\n          if (splitNum.substr(-2, 1) === '1') {\n            splitValues.push(ones[splitNum.substr(-2, 2)]);\n          } else {\n            if (tens[splitNum.substr(-2, 1)]) {\n              splitValues.push(tens[splitNum.substr(-2, 1)]);\n            }\n            if (ones[splitNum.substr(-1, 1)]) {\n              splitValues.push(ones[splitNum.substr(-1, 1)]);\n            }\n          }\n        } else {\n          splitValues.push(ones[splitNum.charAt(0)]);\n        }\n      }\n      if (thousands[splittedNumbers.length - 1 - index] && splitValues.length > 0) {\n        splitValues.push(thousands[splittedNumbers.length - 1 - index]);\n      }\n      if (splitValues.length > 0) {\n        valueArray.push(splitValues.join(' '));\n      }\n    }\n    const result = caseFunction.call(valueArray.join(options.separator + ' '));\n    if (result.includes('Satu Ratus') || result.includes('satu ratus') || result.includes('SATU RATUS')) {\n      return result.replace(/Satu Ratus/i, 'Seratus');\n    }\n    if (result.includes('Satu Ribu') || result.includes('satu ribu') || result.includes('SATU RIBU')) {\n      return result.replace(/Satu Ribu/i, 'Seribu');\n    }\n    return result;\n  }\n}\nmodule.exports = new IdConverter();","map":{"version":3,"names":["numberToText","require","thousands","ones","tens","cases","caseFunctions","String","prototype","toString","toLowerCase","toUpperCase","IdConverter","Converter","constructor","addConverter","convertToText","num","options","separator","indexOf","case","caseFunction","valueArray","Number","call","splittedNumbers","match","index","length","splitValues","splitNum","push","module","exports","charAt","substr","join","result","includes","replace"],"sources":["C:/Users/Lenovo/Documents/BELAJAR/kalkulator-mern/frontend/node_modules/number-to-text/converters/id.js"],"sourcesContent":["const numberToText = require('../index')\r\n\r\nconst thousands = ['', 'Ribu', 'Juta', 'Milyar', 'Triliun']\r\nconst ones = ['', 'Satu', 'Dua', 'Tiga', 'Empat', 'Lima', 'Enam', 'Tujuh', 'Delapan', 'Sembilan', 'Sepuluh', 'Sebelas', 'Dua belas', 'Tiga Belas', 'Empat Belas', 'Lima Belas', 'Enam Belas', 'Tujuh Belas', 'Delapan Belas', 'Sembilan Belas']\r\nconst tens = ['', '', 'Dua Puluh', 'Tiga Puluh', 'Empat Puluh', 'Lima Puluh', 'Enam Puluh', 'Tujuh Puluh', 'Delapan Puluh', 'Sembilan Puluh']\r\nconst cases = ['titleCase', 'lowerCase', 'upperCase']\r\nconst caseFunctions = [String.prototype.toString, String.prototype.toLowerCase, String.prototype.toUpperCase]\r\n\r\nclass IdConverter extends numberToText.Converter {\r\n  constructor () {\r\n    super()\r\n    numberToText.addConverter('id', this)\r\n  }\r\n\r\n  convertToText (num, options) {\r\n    options = options || {}\r\n    if (options.separator !== '') options.separator = options.separator || ''\r\n    if (cases.indexOf(options.case) === -1) {\r\n      options.case = cases[0]\r\n    }\r\n    const caseFunction = caseFunctions[cases.indexOf(options.case)]\r\n\r\n    const valueArray = []\r\n    if (typeof num === 'number' || num instanceof Number) {\r\n      num = num.toString()\r\n    }\r\n    if (num === '0') {\r\n      return caseFunction.call('nol')\r\n    }\r\n    if (num === '100') return caseFunction.call('Seratus')\r\n    if (num === '1000') return caseFunction.call('Seribu')\r\n    const splittedNumbers = num.match(/.{1,}(?=(...){5}(...)$)|.{1,3}(?=(...){0,5}$)|.{1,3}$/g)\r\n    for (let index = 0; index < splittedNumbers.length; ++index) {\r\n      const splitValues = []\r\n      const splitNum = splittedNumbers[index]\r\n      if (splitNum.length > 3) {\r\n        splitValues.push(module.exports.convertToText(splitNum))\r\n      } else {\r\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\r\n          splitValues.push(ones[splitNum.charAt(0)])\r\n          splitValues.push('Ratus')\r\n        } if (splitNum.length >= 2) {\r\n          if (splitNum.substr(-2, 1) === '1') {\r\n            splitValues.push(ones[splitNum.substr(-2, 2)])\r\n          } else {\r\n            if (tens[splitNum.substr(-2, 1)]) {\r\n              splitValues.push(tens[splitNum.substr(-2, 1)])\r\n            }\r\n            if (ones[splitNum.substr(-1, 1)]) {\r\n              splitValues.push(ones[splitNum.substr(-1, 1)])\r\n            }\r\n          }\r\n        } else {\r\n          splitValues.push(ones[splitNum.charAt(0)])\r\n        }\r\n      }\r\n      if (thousands[splittedNumbers.length - 1 - index] && splitValues.length > 0) {\r\n        splitValues.push(thousands[splittedNumbers.length - 1 - index])\r\n      }\r\n      if (splitValues.length > 0) {\r\n        valueArray.push(splitValues.join(' '))\r\n      }\r\n    }\r\n    const result = caseFunction.call((valueArray.join(options.separator + ' ')))\r\n    if (result.includes('Satu Ratus') || result.includes('satu ratus') || result.includes('SATU RATUS')) {\r\n      return result.replace(/Satu Ratus/i, 'Seratus')\r\n    }\r\n    if (result.includes('Satu Ribu') || result.includes('satu ribu') || result.includes('SATU RIBU')) {\r\n      return result.replace(/Satu Ribu/i, 'Seribu')\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\nmodule.exports = new IdConverter()\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}