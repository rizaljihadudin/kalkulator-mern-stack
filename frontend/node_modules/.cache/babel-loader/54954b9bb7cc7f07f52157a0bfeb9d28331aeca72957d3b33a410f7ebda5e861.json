{"ast":null,"code":"const numberToText = require('../index');\nconst thousands = ['', 'Bin', 'Milyon', 'Milyar', 'Trilyon', 'Katrilyon', 'Kentilyon'];\nconst ones = ['', 'Bir', 'İki', 'Üç', 'Dört', 'Beş', 'Altı', 'Yedi', 'Sekiz', 'Dokuz', 'On', 'On Bir', 'On İki', 'On Üç', 'On Dört', 'On Beş', 'On Altı', 'On Yedi', 'On Sekiz', 'On Dokuz'];\nconst tens = ['', '', 'Yirmi', 'Otuz', 'Kırk', 'Elli', 'Altmış', 'Yetmiş', 'Seksen', 'Doksan'];\nconst cases = ['titleCase', 'lowerCase', 'upperCase'];\nconst caseFunctions = [function () {\n  return this.toLocaleString('TR');\n}, function () {\n  return this.toLocaleLowerCase('TR');\n}, function () {\n  return this.toLocaleUpperCase('TR');\n}];\nclass TrConverter extends numberToText.Converter {\n  constructor() {\n    super();\n    numberToText.addConverter('tr', this);\n  }\n  convertToText(num, options) {\n    options = options || {};\n    if (options.separator !== '') options.separator = options.separator || ',';\n    if (cases.indexOf(options.case) === -1) {\n      options.case = cases[0];\n    }\n    const caseFunction = caseFunctions[cases.indexOf(options.case)];\n    const valueArray = [];\n    if (typeof num === 'number' || num instanceof Number) {\n      num = num.toString();\n    }\n    if (num === '0') {\n      return caseFunction.call('Sıfır');\n    }\n    const splittedNumbers = num.match(/.{1,}(?=(...){5}(...)$)|.{1,3}(?=(...){0,5}$)|.{1,3}$/g);\n    for (let index = 0; index < splittedNumbers.length; ++index) {\n      const splitValues = [];\n      const splitNum = splittedNumbers[index];\n      const splitIndex = splittedNumbers.length - 1 - index;\n      if (splitNum.length > 3) {\n        splitValues.push(module.exports.convertToText(splitNum));\n      } else {\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\n          const hundredNum = splitNum.charAt(0);\n          if (hundredNum > 1) {\n            splitValues.push(ones[hundredNum]);\n          }\n          splitValues.push('Yüz');\n        }\n        if (splitNum.length >= 2) {\n          if (splitNum.substr(-2, 1) === '1') {\n            splitValues.push(ones[splitNum.substr(-2, 2)]);\n          } else {\n            if (tens[splitNum.substr(-2, 1)]) {\n              splitValues.push(tens[splitNum.substr(-2, 1)]);\n            }\n            if (ones[splitNum.substr(-1, 1)]) {\n              splitValues.push(ones[splitNum.substr(-1, 1)]);\n            }\n          }\n        } else {\n          const oneNum = splitNum.charAt(0);\n          if (splitIndex !== 1 || oneNum > 1) {\n            splitValues.push(ones[oneNum]);\n          }\n        }\n      }\n      if (thousands[splitIndex] && (splitIndex === 1 || splitValues.length > 0)) {\n        splitValues.push(thousands[splitIndex]);\n      }\n      if (splitValues.length > 0) {\n        valueArray.push(splitValues.join(' '));\n      }\n    }\n    return caseFunction.call(valueArray.join(options.separator + ' '));\n  }\n}\nmodule.exports = new TrConverter();","map":{"version":3,"names":["numberToText","require","thousands","ones","tens","cases","caseFunctions","toLocaleString","toLocaleLowerCase","toLocaleUpperCase","TrConverter","Converter","constructor","addConverter","convertToText","num","options","separator","indexOf","case","caseFunction","valueArray","Number","toString","call","splittedNumbers","match","index","length","splitValues","splitNum","splitIndex","push","module","exports","charAt","hundredNum","substr","oneNum","join"],"sources":["C:/Users/Lenovo/Documents/BELAJAR/kalkulator-mern/frontend/node_modules/number-to-text/converters/tr.js"],"sourcesContent":["const numberToText = require('../index')\n\nconst thousands = ['', 'Bin', 'Milyon', 'Milyar', 'Trilyon', 'Katrilyon', 'Kentilyon']\nconst ones = ['', 'Bir', 'İki', 'Üç', 'Dört', 'Beş', 'Altı', 'Yedi', 'Sekiz', 'Dokuz', 'On', 'On Bir', 'On İki', 'On Üç', 'On Dört', 'On Beş', 'On Altı', 'On Yedi', 'On Sekiz', 'On Dokuz']\nconst tens = ['', '', 'Yirmi', 'Otuz', 'Kırk', 'Elli', 'Altmış', 'Yetmiş', 'Seksen', 'Doksan']\nconst cases = ['titleCase', 'lowerCase', 'upperCase']\nconst caseFunctions = [function () { return this.toLocaleString('TR') }, function () { return this.toLocaleLowerCase('TR') }, function () { return this.toLocaleUpperCase('TR') }]\n\nclass TrConverter extends numberToText.Converter {\n  constructor () {\n    super()\n    numberToText.addConverter('tr', this)\n  }\n\n  convertToText (num, options) {\n    options = options || {}\n    if (options.separator !== '') options.separator = options.separator || ','\n    if (cases.indexOf(options.case) === -1) {\n      options.case = cases[0]\n    }\n    const caseFunction = caseFunctions[cases.indexOf(options.case)]\n\n    const valueArray = []\n    if (typeof num === 'number' || num instanceof Number) {\n      num = num.toString()\n    }\n    if (num === '0') {\n      return caseFunction.call('Sıfır')\n    }\n    const splittedNumbers = num.match(/.{1,}(?=(...){5}(...)$)|.{1,3}(?=(...){0,5}$)|.{1,3}$/g)\n    for (let index = 0; index < splittedNumbers.length; ++index) {\n      const splitValues = []\n      const splitNum = splittedNumbers[index]\n      const splitIndex = splittedNumbers.length - 1 - index\n      if (splitNum.length > 3) {\n        splitValues.push(module.exports.convertToText(splitNum))\n      } else {\n        if (splitNum.length === 3 && ones[splitNum.charAt(0)]) {\n          const hundredNum = splitNum.charAt(0)\n          if (hundredNum > 1) {\n            splitValues.push(ones[hundredNum])\n          }\n          splitValues.push('Yüz')\n        } if (splitNum.length >= 2) {\n          if (splitNum.substr(-2, 1) === '1') {\n            splitValues.push(ones[splitNum.substr(-2, 2)])\n          } else {\n            if (tens[splitNum.substr(-2, 1)]) {\n              splitValues.push(tens[splitNum.substr(-2, 1)])\n            }\n            if (ones[splitNum.substr(-1, 1)]) {\n              splitValues.push(ones[splitNum.substr(-1, 1)])\n            }\n          }\n        } else {\n          const oneNum = splitNum.charAt(0)\n          if (splitIndex !== 1 || oneNum > 1) {\n            splitValues.push(ones[oneNum])\n          }\n        }\n      }\n      if (thousands[splitIndex] && (splitIndex === 1 || splitValues.length > 0)) {\n        splitValues.push(thousands[splitIndex])\n      }\n      if (splitValues.length > 0) {\n        valueArray.push(splitValues.join(' '))\n      }\n    }\n    return caseFunction.call((valueArray.join(options.separator + ' ')))\n  }\n}\n\nmodule.exports = new TrConverter()\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}